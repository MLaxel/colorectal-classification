import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

datagen = ImageDataGenerator(
    validation_split = 0.2,
    rescale=1./255
)

tsize = 128

train_gen = datagen.flow_from_directory('Downloads/colorectal/data2', class_mode='categorical', target_size=(tsize,tsize), shuffle=True)

#train_gen = datagen.flow_from_directory('Downloads/colorectal/data/Train', class_mode='categorical', target_size=(tsize,tsize))
#val_gen = datagen.flow_from_directory('Downloads/colorectal/data/Validate', class_mode='categorical', target_size=(tsize,tsize))
#test_gen = datagen.flow_from_directory('Downloads/colorectal/data/Test', class_mode='categorical', target_size=(tsize,tsize))

# Check Data Images
# batchX, batchy = train_gen.next() 
# index = 15
# plt.imshow(batchX[index])
# print(batchy[index])
# batchy.shape

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(tsize, tsize, 3)),
    tf.keras.layers.MaxPooling2D(2, 2), #127x127
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), #62x62
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(8, activation='softmax')
])

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['acc']
)

algo1 = model.fit_generator(
    train_gen,
    validation_data=val_gen,
    epochs = 10
)

#model diagnostic
plt.plot(algo1.history['loss'])
plt.plot(algo1.history['val_loss'])
plt.title('model train vs validation loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper right')
plt.show()
model.summary()

# Show & Predict
batchX, batchy = train_gen.next() 
plt.imshow(batchX[1])
cell = model.predict_classes(batchX)
y_class = ('Tumor', 'Stroma', 'Complex', 'Lympho', 'Debris', 'Mucosa', 'Adipose', 'Empty')
print('ML predicts cell type is', y_class[cell[1]])
print('Actual cell type is', y_class[np.argmax(batchy[1])])
